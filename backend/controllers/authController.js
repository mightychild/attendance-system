const User = require('../models/User');
const AppError = require('../utils/AppError');
const createSendToken = require('../utils/generateToken');
const catchAsync = require('../utils/catchAsync');
const crypto = require('crypto');

// @desc    Sign up a new user (Student by default)
// @route   POST /api/auth/signup
// @access  Public
exports.signup = catchAsync(async (req, res, next) => {
  const { firstName, lastName, email, universityId, password, passwordConfirm } = req.body;

  // Basic validation
  if (!firstName || !lastName || !email || !password) {
    return next(new AppError('Please provide all required fields.', 400));
  }

  // Check if email already exists
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return next(new AppError('A user with this email already exists.', 400));
  }

  // For students, check if universityId is provided and unique
  if (universityId) {
    const idExists = await User.isUniversityIdTaken(universityId, 'student');
    if (idExists) {
      return next(new AppError('This Student ID is already in use.', 400));
    }
  }

  // Create the new user (role defaults to 'student' from the schema)
  // QR secret will be auto-generated by the pre-save hook
  const newUser = await User.create({
    firstName,
    lastName,
    email,
    universityId,
    password,
    role: 'student'
  });

  // Log the user in immediately after signup (generate token)
  createSendToken(newUser, 201, req, res);
});

// @desc    Login a user
// @route   POST /api/auth/login
// @access  Public
exports.login = catchAsync(async (req, res, next) => {
  const { email, password } = req.body;

  // Check if email and password exist
  if (!email || !password) {
    return next(new AppError('Please provide email and password!', 400));
  }

  // Check if user exists && password is correct
  const user = await User.findOne({ email, isActive: true }).select('+password');

  // Use the instance method we created on the User model
  if (!user || !(await user.correctPassword(password, user.password))) {
    return next(new AppError('Incorrect email or password', 401));
  }

  // If everything is ok, send token to client
  createSendToken(user, 200, req, res);
});